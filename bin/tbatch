#!/usr/bin/env python
import sys, getopt, os
import math,time
import pynappl
import re
from types import StringType

def main():
  try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], "hs:u:p:", ["help", "traverse", "dir=", "store=", "username=", "password="])
  except getopt.GetoptError, err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

  if len(args) == 0:
    error("required action missing")
  elif len(args) > 1:
    error("only one action can be specified")
        
  output = None
  
  store_uri = None
  username = None
  password = None
  dirname = None
  traverse = False
  
  for o, v in opts:
    if o in ("-s", "--store"):
      store_uri = v
      if not store_uri.startswith("http://"):
        store_uri = "http://api.talis.com/stores/%s" % store_uri
    elif o in ("-u", "--username"):
      username = v
    elif o in ("-p", "--password"):
      password = v
    elif o in ("--dir"):
      dirname = v
    elif o in ("--traverse"):
      traverse = True
    elif o in ("-h", "--help"):
      usage()
      sys.exit()
    else:
      assert False, "unhandled option"

  if store_uri is None:
    error("store not specified")

  if dirname is None:
    error("directory not specified")
    
  store = pynappl.Store(store_uri, username, password)
  manager = pynappl.RDFManager(store, dirname, traverse, "\.(rdf|nt|ttl)$")

  if args[0] == "summary":
    print manager.summary()
  elif args[0] == "successes":
    for filename in manager.list_successes():
      print filename
  elif args[0] == "failures":
    for filename in manager.list_failures():
      print filename
  elif args[0] == "new":
    for filename in manager.list_new():
      print filename
  elif args[0] == "retry":
    print "Retrying %s files" % len(manager.list_failures())
    manager.retry_failures(verbose = True)
    print manager.summary()
  elif args[0] == "store":
    print "Storing %s files" % len(manager.list_new())
    manager.process(verbose = True)
    print manager.summary()

  else:
    error("Unrecognised action")

def error(msg):
  print msg
  usage()
  sys.exit(2)

def usage():
  print """tstore: %s action [option]
Manage file based batch upload of RDF to a Talis Platform store

Actions:
 failures        list all files marked as failing
 new             list all files that don't have an ok or fail file      
 reset           remove all failure and success files
 retry           retry all files marked as failing
 store           upload some RDF data to a store's metabox
 successes       list all files marked as succeeding
 summary         produce a summary of progress

Options:
 -h/--help       show this message
 -u/--username   specify username
 -p/--password   specify password
 -s/--store      specify store name. Can be just name, or full URL
 --dir           specify a directory, e.g. containing data to upload
                 or location to place data. 
 --traverse      [NotImpl] recursively store files or RDF
"""


if __name__ == "__main__":
    main()
