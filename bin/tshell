#!/usr/bin/env python

import time
import readline
import re
import getpass
import httplib2
import rdflib
import pynappl
import traceback
import StringIO
import optparse

def splitline(line):
  words = []
  f = StringIO.StringIO(line)
  while True:
    s = f.read(1)
    if not s:
      break
    if s == " ":
      continue
    if s in "\"'":
      stop = s
    elif s == "<":
      stop = ">"
    else:
      stop = " "
    while True:
      c = f.read(1)
      if not c:
        break
      if c == stop:
        if c != " ":
          s += c
        break
      else:
        s += c
    words.append(s)
  return words

class CommandDispatcher(object):
  def __init__(self):
    self.pointer = None
    self.client = httplib2.Http()
    self.store = None
    self.prefixes = {
      "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "dc": "http://purl.org/dc/elements/1.1/",
      "dct": "http://purl.org/dc/terms/",
      "owl": "http://www.w3.org/2002/07/owl#",
      "cs": "http://purl.org/vocab/changeset/schema#",
      "foaf": "http://xmlns.com/foaf/0.1/",
      "geo": "http://www.w3.org/2003/01/geo/wgs84_pos#",
      "rel": "http://purl.org/vocab/relationship/",
      "skos": "http://www.w3.org/2004/02/skos/core#",
      "bibo": "http://purl.org/ontology/bibo/",
      "ov": "http://open.vocab.org/terms/",
      "void": "http://rdfs.org/ns/void#",
      "xsd": "http://www.w3.org/2001/XMLSchema#",
      "dbp": "http://dbpedia.org/resource/",
      "dbpo": "http://dbpedia.org/ontology/",
      "rss": "http://purl.org/rss/1.0/",
      "geonames": "http://www.geonames.org/ontology/",
      "dir": "http://schemas.talis.com/2005/dir/schema#",
    }
    self.title_props = [
      "http://www.w3.org/2004/02/skos/core#prefLabel",
      "http://www.w3.org/2000/01/rdf-schema#label",
      "http://purl.org/dc/terms/title",
      "http://purl.org/dc/elements/1.1/title",
      "http://xmlns.com/foaf/0.1/name",
      "http://www.geonames.org/ontology/name",
      "http://www.w3.org/1999/02/22-rdf-syntax-ns#value",
      "http://purl.org/rss/1.0/title",
    ]
    self.uris = []
    self.return_response = False
    self.history = []

  def __call__(self, words, line, add_to_history=True):
    if words:
      try:
        name = "handle_" + words[0].lower()
        if hasattr(self, name):
          getattr(self, name)(*words[1:])
          if add_to_history:
            self.history.append((words, line))
      except:
        traceback.print_exc()

  def execute(self, func, *args, **kwds):
    while True:
      response, body = func(*args, **kwds)
      if response.status in range(200, 300):
        if self.return_response:
          return response, body
        else:
          return body
      elif response.status == 401:
        print "Unauthorized"
        self.handle_login()
        continue
      else:
        print "Request failed: %d %s - %s" % (response.status, response.reason, body)
        return None

  def bind_prefixes(self, g):
    for prefix, ns in self.prefixes.iteritems():
      g.bind(prefix, ns)

  def geturi(self, v):
    if v.isdigit() and int(v) < len(self.uris):
      return self.uris[int(v)]
    elif v[0] == "<" and v[-1] == ">":
      return rdflib.URIRef(v[1:-1])
    else:
      prefix, name = v.split(":")
      return rdflib.URIRef(self.prefixes[prefix] + name)

  def getval(self, v):
    if v[0] in "\"'":
      lang = dt = None
      if v[-1] != v[0]:
        if "@" in v:
          v, lang = v.rsplit("@", 1)
        elif "^^" in v:
          v, dt = v.rsplit("^^", 1)
      s = v[1:-1]
      return rdflib.Literal(s, lang, dt)
    elif v[:2] == "_:":
      return rdflib.BNode(v[2:])
    else:
      return self.geturi(v)

  def mkval(self, val):
    if isinstance(val, rdflib.Literal):
      return repr(str(val))
    elif isinstance(val, rdflib.URIRef):
      return "<" + val + ">"
    elif isinstance(val, str):
      return val
    else:
      return "_:" + val

  def gettitle(self, g, obj):
    for prop in self.title_props:
      it = g.objects(obj, rdflib.URIRef(prop))
      try:
        return str(it.next())
      except StopIteration:
        pass
    return g.qname(obj)

  def handle_login(self, un=None, pw=None):
    if not un:
      un = raw_input("Username: ")
    if not pw:
      pw = getpass.getpass("Password: ")
    self.client.clear_credentials()
    self.client.add_credentials(un, pw)

  def handle_use(self, store=None):
    if store is None:
      store = raw_input("Store: ")
    self.store = pynappl.Store(store, client=self.client)

  def handle_store(self, filename):
    if self.store is None:
      self.handle_use()
    print "Uploading '%s'" % filename
    self.execute(self.store.store_file, filename)

  def handle_describe(self, uri=None):
    if self.store is None:
      self.handle_use()
    if uri is None and self.pointer is not None:
      uri = self.pointer
    else:
      uri = self.geturi(uri)
    g = self.execute(self.store.describe, uri)
    self.bind_prefixes(g)
    if g:
      print g.serialize(format="turtle")

  def handle_add(self, s, p, o, changeReason="", creatorName="tshell"):
    if self.store is None:
      self.handle_use()
    s = self.getval(s)
    p = self.getval(p)
    o = self.getval(o)
    cs = pynappl.ChangeSet(s)
    cs.setChangeReason(changeReason)
    cs.setCreatorName(creatorName)
    cs.add(p, o)
    body = cs.serialize(format="xml")
    uri = self.store.build_uri("/meta")
    headers = {"Content-Type": "application/vnd.talis.changeset+xml"}
    self.execute(self.client.request, uri, "POST", body, headers)

  def handle_remove(self, s="-", p="-", o="-", changeReason="", creatorName="TConsole"):
    if self.store is None:
      self.handle_use()
    vars = []
    if s == "-":
      s = "?s"
      vars.append(s)
    else:
      s = self.getval(s)
    if p == "-":
      p = "?p"
      vars.append(p)
    else:
      p = self.getval(p)
    if o == "-":
      o = "?o"
      vars.append(o)
    else:
      o = self.getval(o)
    cs = pynappl.BatchChangeSet()
    cs.setChangeReason(changeReason)
    cs.setCreatorName(creatorName)
    if vars:
      print "Querying data..."
      query = "SELECT %s WHERE {%s %s %s.}" % (" ".join(vars), self.mkval(s), self.mkval(p), self.mkval(o))
      results = self.execute(self.store.select, query)
      if results:
        for d in results[1]:
          for h, v in d.iteritems():
            if h == "s":
              s = v
            elif h == "p":
              p = v
            elif h == "o":
              o = v
          cs.remove(s, p, o)
      else:
        return
    else:
      cs.remove(s, p, o)

    headers = {"Content-Type": "application/vnd.talis.changeset+xml"}
    uri = self.store.build_uri("/meta")
    graphs = list(cs.getGraphs())
    nGraphs = len(graphs)
    for i, g in enumerate(graphs):
      body = g.serialize(format="xml")
      print "Applying changeset %d/%d (%d bytes)..." % (i + 1, nGraphs, len(body))
      self.execute(self.client.request, uri, "POST", body, headers)

  def handle_prefix(self, prefix, ns):
    self.prefixes[prefix] = self.geturi(ns)

  def handle_sparql(self, *queryparts):
    if self.store is None:
      self.handle_use()
    query = re.sub(r"\b([-_a-zA-Z0-9]+):([-_a-zA-Z0-9]+)\b", (lambda m: " <" + self.prefixes[m.group(1)] + m.group(2) + "> "), " ".join(queryparts))
    cmd = query.split()[0].upper()
    if cmd == "SELECT":
      results = self.execute(self.store.select, query)
      if results:
        headers, results = results
        sizes = {}
        for h in headers:
          sizes[h] = len(h)
        for d in results:
          for h, v in d.iteritems():
            sizes[h] = max(sizes[h], len(v))
        headerparts = []
        sep = []
        for h in headers:
          headerparts.append(h.center(sizes[h]))
          sep.append("=" * sizes[h])
        print " | ".join(headerparts)
        print "=+=".join(sep)
        for d in results:
          line = []
          for h in headers:
            v = d[h]
            line.append(str(v).center(sizes[h]))
          print " | ".join(line)
    elif cmd == "ASK":
      res = self.execute(self.store.ask, query)
      if res is True:
        print "Yes"
      elif res is False:
        print "No"
    else:
      body = self.execute(self.store.sparql, query)
      if body:
        g = rdflib.ConjunctiveGraph()
        self.bind_prefixes(g)
        g.parse(StringIO.StringIO(body))
        print g.serialize(format="turtle")

  def handle_search(self, query):
    if self.store is None:
      self.handle_use()
    results = self.execute(self.store.search, query, return_graph=True)
    if results:
      g, results = results
      i = 0
      self.uris = []
      for result in results:
        print "%d. %s (%s)" % (i, self.gettitle(g, result), str(result))
        i += 1
        self.uris.append(result)

  def handle_get(self, what, of=None):
    if self.store is None:
      self.handle_use()
    if of is None and self.pointer is not None:
      of = self.pointer
    else:
      of = self.geturi(of)
    if what == "title":
      g = self.execute(self.store.describe, of)
      if g:
        print self.gettitle(g, of)

  def handle_show(self, what):
    if self.store is None:
      self.handle_use()
    if what == "classes":
      results = self.execute(self.store.select, "SELECT DISTINCT ?class WHERE {[] a ?class.}")
      if results:
        self.uris = []
        i = 0
        for d in results[1]:
          print str(i) + ". " + d["class"]
          i += 1
          self.uris.append(d["class"])
    elif what == "properties":
      results = self.execute(self.store.select, "SELECT DISTINCT ?prop WHERE {[] ?prop [].}")
      if results:
        self.uris = []
        i = 0
        for d in results[1]:
          print str(i) + ". " + d["prop"]
          i += 1
          self.uris.append(d["prop"])
    elif what == "topclasses":
      results = self.execute(self.store.select, "SELECT ?class (count(?s) as ?count) WHERE {?s a ?class.} GROUP BY ?class ORDER BY desc(?count) LIMIT 5")
      if results:
        self.uris = []
        i = 0
        for d in results[1]:
          print str(i) + ". " + d["class"]
          i += 1
          self.uris.append(d["class"])
    elif what == "prefixes":
      for prefix, ns in self.prefixes.iteritems():
        print "%s: <%s>" % (prefix, ns)
    elif what == "history":
      i = 0
      for words, line in self.history:
        print "%d: %s" % (i, line)
        i += 1
    else:
      print "Can't show %s" % what
  handle_view = handle_list = handle_show

  def handle_count(self):
    if self.store is None:
      self.handle_use()
    results = self.execute(self.store.select, "SELECT (count(*) as ?count) WHERE {[] ?p [].}")
    if results:
      print "%s triples" % results[1][0]["count"]
  
  def handle_run(self, input):
    if input.isdigit():
      words, line = self.history[int(input)]
      self(words, line, False)
    else:
      f = open(input, "r")
      for line in f:
        line = line.strip()
        if line:
          words = splitline(line)
          self(words, line, False)
      f.close()
  
  def handle_save(self, what, file):
    if what == "history":
      f = open(file, "w")
      for words, line in self.history:
        f.write(line + "\n")
      f.close()
    else:
      print "Can't save %s" % what

  def handle_fpmap(self):
    if self.store is None:
      self.handle_use()
    fpmap = self.execute(self.store.read_fpmap)
    if fpmap is not None:
      modified = False
      while True:
        line = raw_input("fpmap%s> " % (modified and "*" or ""))
        words = splitline(line)
        cmd = words[0].lower()
        if cmd in ("exit", "quit"):
          if modified:
            if raw_input("Exit without saving changes? (y/n) ") != "y":
              self.execute(self.store.write_fpmap, fpmap)
          return
        elif cmd == "save":
          if self.store.write_fpmap(fpmap) is not None:
            modified = False
        elif cmd == "view":
          for prop, d in fpmap.mappings().iteritems():
            print prop, "->", d["name"]
        elif cmd == "add":
          prop = self.geturi(words[1])
          name = words[2]
          fpmap.add_mapping(prop, name)
          modified = True
        elif cmd == "remove":
          prop = self.geturi(words[1])
          fpmap.remove_mapping(prop)
          modified = True
        elif cmd == "prefix":
          prefix = words[1]
          ns = self.geturi(words[2])
          self.prefixes[prefix] = ns

  def handle_sample(self, cls=None):
    if self.store is None:
      self.handle_use()
    if cls:
      query = "SELECT DISTINCT ?s WHERE {?s a <%s>.} LIMIT 10" % self.geturi(cls)
    else:
      query = "SELECT DISTINCT ?s WHERE {?s ?p [].} LIMIT 10"
    results = self.execute(self.store.select, query)
    if results:
      i = 0
      self.uris = []
      for d in results[1]:
        print str(i) + ". " + d["s"]
        i += 1
        self.uris.append(d["s"])

  def handle_goto(self, uri):
    self.pointer = self.geturi(uri)

  def handle_whereami(self):
    print "You're at:", self.pointer
  
  def schedule(self, func, *args):
    self.return_response = True
    response = self.execute(func, *args)
    self.return_response = False
    if response is not None:
      response, body = response
      loc = response["location"]
      print "Job scheduled at '%s'" % loc
      print "Waiting for job to complete"
      while True:
        time.sleep(5)
        job = self.execute(self.store.read_job, loc)
        if not job.has_started():
          print "Job has not started"
        elif job.has_completed():
          print "Job finished"
          return
        else:
          try:
            update = job.progress_updates[-1]
            print "Job in progress:", update.message
          except IndexError:
            print "Job in progress"
  
  def handle_reset(self):
    if self.store is None:
      self.handle_use()
    print "Scheduling reset job for immediate execution"
    self.schedule(self.store.schedule_reset)
  
  def handle_reindex(self):
    if self.store is None:
      self.handle_use()
    print "Scheduling reindex job for immediate execution"
    self.schedule(self.store.schedule_reindex)
  
  def handle_snapshot(self):
    if self.store is None:
      self.handle_use()
    print "Scheduling snapshot job for immediate execution"
    self.schedule(self.store.schedule_snapshot)
    snapshots = self.execute(self.store.snapshots)
    snapshot_uri = snapshots[-1]
    print "Snapshot is at '%s'" % snapshot_uri
  
  def handle_backup(self, filename):
    if self.store is None:
      self.handle_use()
    print "Scheduling snapshot job for immediate execution"
    job = self.schedule(self.store.schedule_snapshot)
    snapshots = self.execute(self.store.snapshots)
    snapshot_uri = snapshots[-1]
    print "Downloading '%s' to '%s'" % (snapshot_uri, filename)
    body = self.execute(self.client.request, snapshot_uri)
    if body is not None:
      f = open(filename, "wb")
      f.write(body)
      f.close()
  
  def handle_restore(self, uri):
    if self.store is None:
      self.handle_use()
    if uri.startswith(("http://", "https://")):
      print "Scheduling restore job for immediate execution"
      self.schedule(self.store.schedule_restore, uri)
    else:
      print "To restore from a local file, it needs to be uploaded to the content box."
      if raw_input("Continue? (y/n) ") == "y":
        f = open(uri, "rb")
        data = f.read() 
        f.close()
        self.return_response = True
        response = self.execute(self.client.request, self.store.build_uri("/items"), "POST", data)
        self.return_response = False
        if response is not None:
          response, body = response
          uri = response["location"]
          self.schedule(self.store.schedule_restore, uri)

  def handle_help(self):
    print "Note: {uri} represents a URI delimited by angle brackets or a qname"
    print "help               - show this help text"
    print "exit               - exit the shell"
    print "login              - prompt for username and password to use"
    print "use {storename}    - set storename to be the current store"
    print "show prefixes      - show the current list of prefixes"
    print "prefix {p} {uri}   - map prefix p to the given URI"
    print "sample             - list 10 resources at random"
    print "sample {uri}       - list 10 resources with the given type"
    print "store {filename}   - upload the triples held in filename to the store's metabox"
    print "count              - count the number of triples in the store"
    print "show classes       - show a list of classes used in the store"
    print "show properties    - show a list of properties used in the store"
    print "show topclasses    - show a list of the top 5 classes used in the store, with counts"
    print "describe {uri}     - get the CBD of the given URI"
    print "sparql {query}     - execute a sparql query"
    print "search {query}     - execute a full text query"
    print "add {s} {p} {o}    - add a triple to the store"
    print "remove {s} {p} {o} - remove a triple from the store"
    print "remove {s} {p}     - remove all triples with specified subject and predicate"
    print "remove {s}         - remove all triples with specified subject"
    print "remove {s} - {o}   - remove all triples with specified subject and object"
    print "remove - - {o}     - remove all triples with specified object"
    print "fpmap              - start the field/predicate map editor"


def main():
  p = optparse.OptionParser()
  p.add_option("-u", "--username", action="store", dest="username", metavar="USERNAME", help="login in as USERNAME")
  p.add_option("-p", "--password", action="store", dest="password", metavar="PASSWORD", help="login in with PASSWORD")
  opts, args = p.parse_args()
  d = CommandDispatcher()
  if opts.username and opts.password:
    d.client.add_credentials(opts.username, opts.password)
  if len(args):
    for file in args:
      f = open(file, "r")
      for line in f:
        line = line.strip()
        if line:
          words = splitline(line)
          d(words, line)
      f.close()
  else:
    while True:
      line = raw_input(">>> ")
      if line.lower() in ("exit", "quit"):
        return
      words = splitline(line)
      d(words, line)

if __name__ == "__main__":
  main()
